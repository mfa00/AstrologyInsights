import { eq, desc, like, or, sql, and } from 'drizzle-orm';
import { db } from './db';
import { articles, categories, horoscopes, articleViews, type Article, type InsertArticle, type Category, type InsertCategory, type Horoscope, type InsertHoroscope, type ArticleView, type InsertArticleView } from "@shared/schema";

export interface IStorage {
  // Articles
  getArticles(limit?: number, offset?: number, category?: string, featured?: boolean): Promise<Article[]>;
  getArticle(id: number): Promise<Article | undefined>;
  createArticle(article: InsertArticle): Promise<Article>;
  updateArticleViews(id: number, sessionId: string, ipAddress?: string, userAgent?: string): Promise<boolean>;
  searchArticles(query: string): Promise<Article[]>;
  getPopularArticles(limit?: number): Promise<Article[]>;
  updateArticle(id: number, article: Partial<InsertArticle>): Promise<Article | undefined>;
  deleteArticle(id: number): Promise<boolean>;
  
  // View tracking
  hasViewedArticle(articleId: number, sessionId: string): Promise<boolean>;
  recordArticleView(view: InsertArticleView): Promise<void>;
  
  // Categories
  getCategories(): Promise<Category[]>;
  getCategory(name: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Horoscopes
  getAllHoroscopes(): Promise<Horoscope[]>;
  getDailyHoroscope(zodiacSign: string): Promise<Horoscope | undefined>;
  createHoroscope(horoscope: InsertHoroscope): Promise<Horoscope>;
  
  // Users (for admin)
  getAllUsers(): Promise<any[]>;
  createUser(user: { username: string; email: string; role: string }): Promise<any>;
  
  // Database management
  initializeDatabase(): Promise<void>;
  
  // Analytics
  getViewStatistics(): Promise<{ totalViews: number; totalLikes: number; totalArticles: number }>;
  initializeHistoricalViewCounts(): Promise<void>;
}

export class DatabaseStorage implements IStorage {
  async initializeDatabase(): Promise<void> {
    console.log('­Ъћё Initializing database...');
    
    try {
      // Check if tables exist by querying categories (one of our main tables)
      const existingCategories = await db.select().from(categories).limit(1);
      
      if (existingCategories.length === 0) {
        console.log('­ЪЊі Seeding database with initial data...');
        await this.seedData();
      } else {
        console.log('РюЁ Database already initialized');
      }
    } catch (error) {
      console.log('­ЪЊі Database appears empty, seeding with initial data...');
      await this.seedData();
    }
  }

  private async seedData(): Promise<void> {
    try {
    // Seed categories
    const categoryData: InsertCategory[] = [
      { name: "horoscope", nameGeorgian: "рЃ░рЃЮрЃарЃЮрЃАрЃЎрЃЮрЃърЃў", description: "Daily and weekly horoscopes", color: "sky-blue" },
      { name: "crystals", nameGeorgian: "рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃћрЃЉрЃў", description: "Healing crystals and their properties", color: "deep-sky" },
      { name: "moon-phases", nameGeorgian: "рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃцрЃљрЃќрЃћрЃЉрЃў", description: "Moon phases and their influence", color: "ocean-blue" },
      { name: "spirituality", nameGeorgian: "рЃАрЃБрЃџрЃўрЃћрЃарЃћрЃЉрЃљ", description: "Spiritual growth and enlightenment", color: "sky-blue" },
      { name: "meditation", nameGeorgian: "рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃљ", description: "Meditation practices and mindfulness", color: "deep-sky" }
    ];

      console.log('­ЪЊѓ Seeding categories...');
      for (const cat of categoryData) {
        await db.insert(categories).values(cat).onConflictDoNothing();
      }

      // Seed articles
    const articleData: InsertArticle[] = [
      {
        title: "2024 рЃгрЃџрЃўрЃА рЃљрЃАрЃбрЃарЃЮрЃџрЃЮрЃњрЃўрЃБрЃарЃў рЃърЃарЃЮрЃњрЃюрЃЮрЃќрЃў - рЃДрЃЋрЃћрЃџрЃљ рЃќрЃЮрЃЊрЃўрЃљрЃЦрЃЮрЃА рЃюрЃўрЃерЃюрЃўрЃАрЃЌрЃЋрЃўрЃА",
        excerpt: "рЃљрЃ«рЃљрЃџрЃў рЃгрЃћрЃџрЃў рЃљрЃ«рЃљрЃџ рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃА рЃЏрЃЮрЃњрЃЋрЃљрЃюрЃўрЃГрЃћрЃЉрЃА. рЃЋрЃљрЃарЃАрЃЎрЃЋрЃџрЃљрЃЋрЃћрЃЉрЃўрЃА рЃЎрЃЮрЃюрЃцрЃўрЃњрЃБрЃарЃљрЃфрЃўрЃљ рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃБрЃџ рЃћрЃюрЃћрЃарЃњрЃўрЃљрЃА рЃњрЃЋрЃърЃўрЃарЃЊрЃћрЃЉрЃљ рЃДрЃЋрЃћрЃџрЃљ рЃќрЃЮрЃЊрЃўрЃљрЃЦрЃЮрЃА рЃюрЃўрЃерЃюрЃўрЃАрЃЌрЃЋрЃўрЃА...",
        content: "2024 рЃгрЃћрЃџрЃў рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃБрЃџрЃў рЃгрЃћрЃџрЃўрЃљ рЃљрЃАрЃбрЃарЃЮрЃџрЃЮрЃњрЃўрЃБрЃарЃў рЃЌрЃЋрЃљрЃџрЃАрЃљрЃќрЃарЃўрЃАрЃўрЃЌ. рЃЏрЃљрЃарЃАрЃў рЃЊрЃљ рЃЋрЃћрЃюрЃћрЃарЃўрЃА рЃЎрЃЮрЃюрЃўрЃБрЃюрЃЦрЃфрЃўрЃљ рЃљрЃърЃарЃўрЃџрЃерЃў рЃљрЃ«рЃљрЃџ рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃА рЃњрЃЋрЃърЃўрЃарЃЊрЃћрЃЉрЃљ рЃАрЃўрЃДрЃЋрЃљрЃарЃБрЃџрЃўрЃА рЃАрЃцрЃћрЃарЃЮрЃерЃў. рЃўрЃБрЃърЃўрЃбрЃћрЃарЃўрЃА рЃњрЃљрЃЊрЃљрЃАрЃЋрЃџрЃљ рЃбрЃДрЃБрЃърЃћрЃЉрЃерЃў рЃЏрЃљрЃбрЃћрЃарЃўрЃљрЃџрЃБрЃа рЃЎрЃћрЃЌрЃўрЃџрЃЊрЃдрЃћрЃЮрЃЉрЃљрЃАрЃљ рЃЊрЃљ рЃАрЃбрЃљрЃЉрЃўрЃџрЃБрЃарЃЮрЃЉрЃљрЃА рЃюрЃўрЃерЃюрЃљрЃЋрЃА. рЃАрЃљрЃбрЃБрЃарЃюрЃў рЃЎрЃў рЃЏрЃўрЃњрЃЋрЃўрЃбрЃљрЃюрЃА рЃАрЃбрЃљрЃЉрЃўрЃџрЃБрЃарЃЮрЃЉрЃљрЃАрЃљ рЃЊрЃљ рЃЊрЃўрЃАрЃфрЃўрЃърЃџрЃўрЃюрЃљрЃерЃў. рЃљрЃЏ рЃгрЃћрЃџрЃА рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃўрЃЌ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ рЃўрЃюрЃбрЃБрЃўрЃфрЃўрЃўрЃА рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃљ рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃњрЃљрЃюрЃЋрЃўрЃЌрЃљрЃарЃћрЃЉрЃўрЃА рЃњрЃќрЃљрЃќрЃћ рЃгрЃўрЃюрЃАрЃЋрЃџрЃљ.",
        category: "horoscope",
        author: "рЃюрЃўрЃюрЃЮ рЃљрЃАрЃбрЃарЃЮрЃџрЃЮрЃњрЃў",
        authorRole: "рЃърЃарЃЮрЃцрЃћрЃАрЃўрЃЮрЃюрЃљрЃџрЃў рЃљрЃАрЃбрЃарЃЮрЃџрЃЮрЃњрЃў",
        imageUrl: "https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        publishedAt: new Date("2024-01-15"),
        featured: true
      },
      {
        title: "рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃћрЃЉрЃўрЃА рЃЏрЃЎрЃБрЃарЃюрЃљрЃџрЃў рЃФрЃљрЃџрЃљ рЃЊрЃљ рЃЌрЃљрЃюрЃљрЃЏрЃћрЃЊрЃарЃЮрЃЋрЃћ рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃљ",
        excerpt: "рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃћрЃЉрЃў рЃФрЃЋрЃћрЃџрЃў рЃЊрЃарЃЮрЃўрЃЊрЃљрЃю рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЉрЃЮрЃЊрЃљ рЃЏрЃЎрЃБрЃарЃюрЃљрЃџрЃЮрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃњрЃљрЃюрЃгрЃЏрЃћрЃюрЃЊрЃўрЃАрЃЌрЃЋрЃўрЃА. рЃЊрЃдрЃћрЃА рЃЏрЃћрЃфрЃюрЃўрЃћрЃарЃћрЃЉрЃљрЃф рЃљрЃдрЃўрЃљрЃарЃћрЃЉрЃА рЃЏрЃљрЃЌ рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃа рЃЌрЃЋрЃўрЃАрЃћрЃЉрЃћрЃЉрЃА...",
        content: "рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃћрЃЉрЃў рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃБрЃџрЃў рЃАрЃбрЃарЃБрЃЦрЃбрЃБрЃарЃћрЃЉрЃўрЃА рЃЏрЃЦрЃЮрЃюрЃћ рЃЏрЃўрЃюрЃћрЃарЃљрЃџрЃћрЃЉрЃўрЃљ, рЃарЃЮрЃЏрЃџрЃћрЃЉрЃўрЃф рЃљрЃЌрЃљрЃАрЃгрЃџрЃћрЃБрЃџрЃћрЃЉрЃўрЃА рЃЏрЃљрЃюрЃФрЃўрЃџрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЉрЃЮрЃЊрЃљ рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃЎрЃБрЃџрЃбрЃБрЃарЃћрЃЉрЃерЃў. рЃљрЃЏрЃћрЃЌрЃўрЃАрЃбрЃў рЃљрЃФрЃџрЃўрЃћрЃарЃћрЃЉрЃА рЃўрЃюрЃбрЃБрЃўрЃфрЃўрЃљрЃА рЃЊрЃљ рЃўрЃфрЃљрЃЋрЃА рЃюрЃћрЃњрЃљрЃбрЃўрЃБрЃарЃў рЃћрЃюрЃћрЃарЃњрЃўрЃўрЃАрЃњрЃљрЃю. рЃарЃЮрЃќрЃћ рЃЎрЃЋрЃљрЃарЃфрЃў рЃАрЃўрЃДрЃЋрЃљрЃарЃБрЃџрЃўрЃАрЃљ рЃЊрЃљ рЃЌрЃљрЃюрЃљрЃњрЃарЃФрЃюрЃЮрЃЉрЃўрЃА рЃЦрЃЋрЃљрЃљ. рЃфрЃўрЃбрЃарЃўрЃюрЃў рЃЎрЃў рЃЏрЃљрЃбрЃћрЃарЃўрЃљрЃџрЃБрЃа рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃљрЃАрЃљ рЃЊрЃљ рЃАрЃўрЃ«рЃљрЃарЃБрЃџрЃА рЃўрЃќрЃўрЃЊрЃљрЃЋрЃА. рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃБрЃџрЃљрЃарЃБрЃџрЃў рЃгрЃЏрЃћрЃюрЃЊрЃљ рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃерЃБрЃЦрЃќрЃћ рЃљрЃю рЃЏрЃљрЃарЃўрЃџрЃўрЃљрЃю рЃгрЃДрЃљрЃџрЃерЃў.",
        category: "crystals",
        author: "рЃЏрЃљрЃарЃўрЃљрЃЏ рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃЮрЃЌрЃћрЃарЃљрЃърЃћрЃЋрЃбрЃў",
        authorRole: "рЃЎрЃарЃўрЃАрЃбрЃљрЃџрЃЮрЃЌрЃћрЃарЃљрЃърЃћрЃЋрЃбрЃў",
        imageUrl: "https://images.unsplash.com/photo-1518066000714-58c45f1a2c0a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        publishedAt: new Date("2024-01-10"),
        featured: false
      },
      {
        title: "рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃцрЃљрЃќрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃЕрЃЋрЃћрЃюрЃў рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃўрЃА рЃдрЃарЃЏрЃљ рЃЎрЃљрЃЋрЃерЃўрЃарЃў",
        excerpt: "рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃцрЃљрЃќрЃћрЃЉрЃў рЃдрЃарЃЏрЃљ рЃњрЃљрЃЋрЃџрЃћрЃюрЃљрЃА рЃљрЃ«рЃЊрЃћрЃюрЃћрЃю рЃЕрЃЋрЃћрЃюрЃА рЃћрЃЏрЃЮрЃфрЃўрЃБрЃа рЃЏрЃЊрЃњрЃЮрЃЏрЃљрЃарЃћрЃЮрЃЉрЃљрЃќрЃћ, рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃљрЃќрЃћ рЃЊрЃљ рЃЏрЃЌрЃџрЃўрЃљрЃюрЃљрЃЊ рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃўрЃА рЃарЃўрЃбрЃЏрЃќрЃћ...",
        content: "рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃфрЃўрЃЎрЃџрЃў 29.5 рЃЊрЃдрЃўрЃАрЃљрЃљ рЃЊрЃљ рЃДрЃЮрЃЋрЃћрЃџрЃў рЃцрЃљрЃќрЃљ рЃњрЃљрЃюрЃАрЃ«рЃЋрЃљрЃЋрЃћрЃЉрЃБрЃџ рЃћрЃюрЃћрЃарЃњрЃўрЃљрЃА рЃљрЃбрЃљрЃарЃћрЃЉрЃА. рЃљрЃ«рЃљрЃџрЃў рЃЏрЃЌрЃЋрЃљрЃарЃћ рЃўрЃЊрЃћрЃљрЃџрЃБрЃарЃўрЃљ рЃљрЃ«рЃљрЃџрЃў рЃЊрЃљрЃгрЃДрЃћрЃЉрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА, рЃюрЃЮрЃЋрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃњрЃћрЃњрЃЏрЃћрЃЉрЃўрЃА рЃерЃћрЃЊрЃњрЃћрЃюрЃўрЃАрЃЌрЃЋрЃўрЃА. рЃЏрЃќрЃљрЃарЃЊрЃў рЃЏрЃЌрЃЋрЃљрЃарЃћ рЃќрЃарЃЊрЃљрЃАрЃљ рЃЊрЃљ рЃЏрЃўрЃќрЃюрЃћрЃЉрЃўрЃАрЃЎрЃћрЃю рЃАрЃЋрЃџрЃљрЃА рЃ«рЃћрЃџрЃА рЃБрЃгрЃДрЃЮрЃЉрЃА. рЃАрЃљрЃЋрЃАрЃћ рЃЏрЃЌрЃЋрЃљрЃарЃћ рЃерЃћрЃЊрЃћрЃњрЃћрЃЉрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃўрЃАрЃљ рЃЊрЃљ рЃарЃћрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃўрЃА рЃЊрЃарЃЮрЃљ. рЃЎрЃџрЃћрЃЉрЃљрЃЊрЃў рЃЏрЃЌрЃЋрЃљрЃарЃћ рЃЎрЃў рЃњрЃљрЃюрЃгрЃЏрЃћрЃюрЃЊрЃљрЃАрЃљ рЃЊрЃљ рЃњрЃљрЃЌрЃљрЃЋрЃўрЃАрЃБрЃцрЃџрЃћрЃЉрЃљрЃА рЃћрЃЏрЃАрЃљрЃ«рЃБрЃарЃћрЃЉрЃљ.",
        category: "moon-phases",
        author: "рЃЊрЃљрЃЋрЃўрЃЌ рЃџрЃБрЃюрЃЮрЃџрЃЮрЃњрЃў",
        authorRole: "рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃфрЃўрЃЎрЃџрЃћрЃЉрЃўрЃА рЃАрЃърЃћрЃфрЃўрЃљрЃџрЃўрЃАрЃбрЃў",
        imageUrl: "https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        publishedAt: new Date("2024-01-08"),
        featured: false
      },
      {
        title: "рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃўрЃА рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃФрЃљрЃџрЃљ рЃЌрЃљрЃюрЃљрЃЏрЃћрЃЊрЃарЃЮрЃЋрЃћ рЃАрЃљрЃќрЃЮрЃњрЃљрЃЊрЃЮрЃћрЃЉрЃљрЃерЃў",
        excerpt: "рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃљ рЃљрЃарЃўрЃА рЃФрЃЋрЃћрЃџрЃў рЃърЃарЃљрЃЦрЃбрЃўрЃЎрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃЋрЃћрЃ«рЃЏрЃљрЃарЃћрЃЉрЃљ рЃерЃўрЃюрЃљрЃњрЃљрЃюрЃў рЃЏрЃерЃЋрЃўрЃЊрЃЮрЃЉрЃўрЃА рЃЏрЃЮрЃФрЃћрЃЉрЃюрЃљрЃерЃў рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃњрЃљрЃюрЃЋрЃўрЃЌрЃљрЃарЃћрЃЉрЃўрЃА рЃњрЃќрЃљрЃќрЃћ рЃгрЃўрЃюрЃАрЃЋрЃџрЃљрЃерЃў...",
        content: "рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃљ рЃљрЃЌрЃљрЃАрЃгрЃџрЃћрЃБрЃџрЃћрЃЉрЃўрЃА рЃЏрЃљрЃюрЃФрЃўрЃџрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЉрЃЮрЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃњрЃљрЃюрЃЋрЃўрЃЌрЃљрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃЎрЃБрЃџрЃбрЃБрЃарЃћрЃЉрЃАрЃљ рЃЊрЃљ рЃбрЃарЃљрЃЊрЃўрЃфрЃўрЃћрЃЉрЃерЃў. рЃЌрЃљрЃюрЃљрЃЏрЃћрЃЊрЃарЃЮрЃЋрЃћ рЃЏрЃћрЃфрЃюрЃўрЃћрЃарЃћрЃЉрЃљ рЃљрЃЊрЃљрЃАрЃбрЃБрЃарЃћрЃЉрЃА рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃўрЃА рЃЊрЃљрЃЊрЃћрЃЉрЃўрЃЌ рЃњрЃљрЃЋрЃџрЃћрЃюрЃљрЃА рЃбрЃЋрЃўрЃюрЃўрЃА рЃЏрЃБрЃерЃљрЃЮрЃЉрЃљрЃќрЃћ. рЃарЃћрЃњрЃБрЃџрЃљрЃарЃБрЃџрЃў рЃърЃарЃљрЃЦрЃбрЃўрЃЎрЃљ рЃљрЃЏрЃфрЃўрЃарЃћрЃЉрЃА рЃАрЃбрЃарЃћрЃАрЃА, рЃљрЃБрЃЏрЃ»рЃЮрЃЉрЃћрЃАрЃћрЃЉрЃА рЃЎрЃЮрЃюрЃфрЃћрЃюрЃбрЃарЃљрЃфрЃўрЃљрЃА рЃЊрЃљ рЃќрЃарЃЊрЃўрЃА рЃерЃўрЃюрЃљрЃњрЃљрЃю рЃЏрЃерЃЋрЃўрЃЊрЃЮрЃЉрЃљрЃА.",
        category: "meditation",
        author: "рЃљрЃюрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃЏрЃљрЃАрЃгрЃљрЃЋрЃџрЃћрЃЉрЃћрЃџрЃў",
        authorRole: "рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃўрЃА рЃўрЃюрЃАрЃбрЃарЃБрЃЦрЃбрЃЮрЃарЃў",
        imageUrl: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        publishedAt: new Date("2024-01-05"),
        featured: false
      },
      {
        title: "рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃњрЃљрЃюрЃгрЃЏрЃћрЃюрЃЊрЃљ рЃЊрЃљ рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃБрЃџрЃў рЃЊрЃљрЃфрЃЋрЃљ",
        excerpt: "рЃДрЃЮрЃЋрЃћрЃџрЃЊрЃдрЃўрЃБрЃарЃў рЃфрЃ«рЃЮрЃЋрЃарЃћрЃЉрЃљрЃерЃў рЃЕрЃЋрЃћрЃю рЃЋрЃ«рЃЋрЃЊрЃћрЃЉрЃўрЃЌ рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃюрЃћрЃњрЃљрЃбрЃўрЃБрЃа рЃћрЃюрЃћрЃарЃњрЃўрЃћрЃЉрЃА. рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ рЃЋрЃўрЃфрЃЮрЃЊрЃћрЃЌ, рЃарЃЮрЃњрЃЮрЃа рЃЊрЃљрЃЋрЃўрЃфрЃЋрЃљрЃЌ рЃЕрЃЋрЃћрЃюрЃў рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃБрЃџрЃў рЃЋрЃћрЃџрЃў...",
        content: "рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃБрЃџрЃў рЃЊрЃљрЃфрЃЋрЃљ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃў рЃюрЃљрЃгрЃўрЃџрЃўрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃърЃарЃљрЃЦрЃбрЃўрЃЎрЃўрЃАрЃљ. рЃАрЃърЃўрЃарЃўрЃбрЃБрЃљрЃџрЃБрЃарЃў рЃњрЃљрЃюрЃгрЃЏрЃћрЃюрЃЊрЃўрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃћрЃЉрЃА рЃерЃЮрЃарЃўрЃА рЃДрЃЋрЃћрЃџрЃљрЃќрЃћ рЃћрЃцрЃћрЃЦрЃбрЃБрЃарЃўрЃљ: рЃЌрЃћрЃЌрЃарЃў рЃерЃБрЃЦрЃўрЃА рЃЋрЃўрЃќрЃБрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃљ, рЃЊрЃљрЃЏрЃфрЃљрЃЋрЃў рЃЏрЃљрЃюрЃбрЃарЃћрЃЉрЃўрЃА рЃњрЃљрЃюрЃЏрЃћрЃЮрЃарЃћрЃЉрЃљ, рЃЎрЃБрЃарЃљрЃЏрЃўрЃА рЃњрЃљрЃЊрЃљрЃЎрЃЋрЃћрЃЋрЃљ рЃЊрЃљ рЃЏрЃљрЃарЃўрЃџрЃўрЃА рЃЉрЃљрЃюрЃљрЃЮ. рЃљрЃАрЃћрЃЋрЃћ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ рЃБрЃљрЃарЃДрЃЮрЃцрЃўрЃЌрЃў рЃљрЃЊрЃљрЃЏрЃўрЃљрЃюрЃћрЃЉрЃўрЃАрЃњрЃљрЃю рЃЊрЃўрЃАрЃбрЃљрЃюрЃфрЃўрЃљ рЃЊрЃљ рЃарЃћрЃњрЃБрЃџрЃљрЃарЃБрЃџрЃў рЃЏрЃћрЃЊрЃўрЃбрЃљрЃфрЃўрЃљ.",
        category: "spirituality",
        author: "рЃњрЃўрЃЮрЃарЃњрЃў рЃерЃљрЃЏрЃљрЃюрЃў",
        authorRole: "рЃћрЃюрЃћрЃарЃњрЃћрЃбрЃўрЃЎрЃБрЃџрЃў рЃърЃарЃљрЃЦрЃбрЃўрЃЎрЃћрЃЉрЃўрЃА рЃАрЃърЃћрЃфрЃўрЃљрЃџрЃўрЃАрЃбрЃў",
        imageUrl: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
        publishedAt: new Date("2023-12-28"),
        featured: true
        }
      ];

      console.log('­ЪЊ░ Seeding articles...');
      for (const article of articleData) {
        await db.insert(articles).values(article).onConflictDoNothing();
      }

      // Seed horoscopes
      const horoscopeData: InsertHoroscope[] = [
        {
          zodiacSign: "aries",
          zodiacSignGeorgian: "рЃЋрЃћрЃарЃФрЃў",
          content: "рЃЊрЃдрЃћрЃА рЃЋрЃћрЃарЃФрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃБрЃџрЃў рЃЊрЃдрЃћрЃљ рЃћрЃюрЃћрЃарЃњрЃўрЃўрЃАрЃљ рЃЊрЃљ рЃЏрЃЮрЃбрЃўрЃЋрЃљрЃфрЃўрЃўрЃА рЃЌрЃЋрЃљрЃџрЃАрЃљрЃќрЃарЃўрЃАрЃўрЃЌ. рЃЏрЃљрЃарЃАрЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃЌрЃЦрЃЋрЃћрЃю рЃўрЃдрЃћрЃЉрЃЌ рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃФрЃљрЃџрЃљрЃА рЃљрЃ«рЃљрЃџрЃў рЃърЃарЃЮрЃћрЃЦрЃбрЃћрЃЉрЃўрЃА рЃЊрЃљрЃАрЃљрЃгрЃДрЃћрЃЉрЃљрЃЊ.",
          date: new Date()
        },
        {
          zodiacSign: "taurus",
          zodiacSignGeorgian: "рЃ«рЃљрЃарЃў",
          content: "рЃ«рЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ рЃАрЃбрЃљрЃЉрЃўрЃџрЃБрЃарЃЮрЃЉрЃљ рЃЊрЃљ рЃњрЃљрЃюрЃЏрЃћрЃЮрЃарЃћрЃЉрЃўрЃЌрЃў рЃдрЃЮрЃюрЃўрЃАрЃФрЃўрЃћрЃЉрЃћрЃЉрЃў. рЃЋрЃћрЃюрЃћрЃарЃўрЃА рЃЊрЃљрЃЊрЃћрЃЉрЃўрЃЌрЃў рЃљрЃАрЃърЃћрЃЦрЃбрЃў рЃАрЃўрЃДрЃЋрЃљрЃарЃБрЃџрЃўрЃА рЃАрЃцрЃћрЃарЃЮрЃерЃў рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃљрЃА рЃърЃўрЃарЃЊрЃћрЃЉрЃљ.",
          date: new Date()
        },
        {
          zodiacSign: "gemini",
          zodiacSignGeorgian: "рЃбрЃДрЃБрЃърЃћрЃЉрЃў",
          content: "рЃбрЃДрЃБрЃърЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃЎрЃЮрЃЏрЃБрЃюрЃўрЃЎрЃљрЃфрЃўрЃљ рЃгрЃўрЃюрЃљ рЃърЃџрЃљрЃюрЃќрЃћрЃљ. рЃЏрЃћрЃарЃЎрЃБрЃарЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃўрЃдрЃћрЃЉрЃЌ рЃљрЃ«рЃљрЃџ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљрЃА рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃАрЃљрЃАрЃљрЃарЃњрЃћрЃЉрЃџрЃЮ рЃўрЃЦрЃюрЃћрЃЉрЃљ рЃЏрЃЮрЃЏрЃљрЃЋрЃџрЃўрЃАрЃЌрЃЋрЃўрЃА.",
          date: new Date()
        },
        {
          zodiacSign: "cancer",
          zodiacSignGeorgian: "рЃЎрЃљрЃюрЃЕрЃ«рЃў",
          content: "рЃЎрЃљрЃюрЃЕрЃ«рЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃћрЃЏрЃЮрЃфрЃўрЃБрЃарЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ. рЃЏрЃЌрЃЋрЃљрЃарЃўрЃА рЃцрЃљрЃќрЃљ рЃ«рЃћрЃџрЃА рЃБрЃгрЃДрЃЮрЃЉрЃА рЃЮрЃ»рЃљрЃ«рЃБрЃа рЃБрЃарЃЌрЃўрЃћрЃарЃЌрЃЮрЃЉрЃћрЃЉрЃерЃў рЃ░рЃљрЃарЃЏрЃЮрЃюрЃўрЃўрЃА рЃЊрЃљрЃЏрЃДрЃљрЃарЃћрЃЉрЃљрЃА.",
          date: new Date()
        },
        {
          zodiacSign: "leo",
          zodiacSignGeorgian: "рЃџрЃЮрЃЏрЃў",
          content: "рЃџрЃЮрЃЏрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃЎрЃарЃћрЃљрЃбрЃўрЃБрЃџрЃЮрЃЉрЃљ рЃЊрЃљ рЃЌрЃЋрЃўрЃЌрЃњрЃљрЃЏрЃЮрЃ«рЃљрЃбрЃЋрЃљ рЃгрЃўрЃюрЃљ рЃърЃџрЃљрЃюрЃќрЃћрЃљ. рЃЏрЃќрЃўрЃА рЃћрЃюрЃћрЃарЃњрЃўрЃљ рЃЏрЃЮрЃњрЃфрЃћрЃЏрЃЌ рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃюрЃЊрЃЮрЃЉрЃљрЃА рЃЌрЃЦрЃЋрЃћрЃюрЃА рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃерЃў.",
          date: new Date()
        },
        {
          zodiacSign: "virgo",
          zodiacSignGeorgian: "рЃЦрЃљрЃџрЃгрЃБрЃџрЃў",
          content: "рЃЦрЃљрЃџрЃгрЃБрЃџрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃЊрЃћрЃбрЃљрЃџрЃћрЃЉрЃќрЃћ рЃДрЃБрЃарЃљрЃЊрЃдрЃћрЃЉрЃљ рЃЊрЃљ рЃАрЃўрЃАрЃбрЃћрЃЏрЃљрЃбрЃБрЃарЃЮрЃЉрЃљ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ. рЃЌрЃЦрЃЋрЃћрЃюрЃў рЃљрЃюрЃљрЃџрЃўрЃбрЃўрЃЎрЃБрЃарЃў рЃБрЃюрЃљрЃарЃћрЃЉрЃў рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃўрЃЌ рЃЏрЃЮрЃЦрЃЏрЃћрЃЊрЃўрЃљ.",
          date: new Date()
        },
        {
          zodiacSign: "libra",
          zodiacSignGeorgian: "рЃАрЃљрЃАрЃгрЃЮрЃарЃў",
          content: "рЃАрЃљрЃАрЃгрЃЮрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃЉрЃљрЃџрЃљрЃюрЃАрЃў рЃЊрЃљ рЃ░рЃљрЃарЃЏрЃЮрЃюрЃўрЃљ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ. рЃЋрЃћрЃюрЃћрЃарЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃърЃљрЃарЃбрЃюрЃўрЃЮрЃарЃЮрЃЉрЃљрЃерЃў рЃљрЃ«рЃљрЃџрЃў рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃў рЃўрЃ«рЃАрЃюрЃћрЃЉрЃљ.",
          date: new Date()
        },
        {
          zodiacSign: "scorpio",
          zodiacSignGeorgian: "рЃЏрЃЮрЃарЃўрЃћрЃџрЃў",
          content: "рЃЏрЃЮрЃарЃўрЃћрЃџрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃдрЃарЃЏрЃљ рЃўрЃюрЃбрЃБрЃўрЃфрЃўрЃљ рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃќрЃарЃЊрЃљ рЃгрЃўрЃюрЃљ рЃърЃџрЃљрЃюрЃќрЃћрЃљ. рЃърЃџрЃБрЃбрЃЮрЃюрЃўрЃА рЃћрЃюрЃћрЃарЃњрЃўрЃљ рЃбрЃарЃљрЃюрЃАрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃўрЃА рЃърЃарЃЮрЃфрЃћрЃАрЃА рЃљрЃДрЃћрЃюрЃћрЃЉрЃА.",
          date: new Date()
        },
        {
          zodiacSign: "sagittarius",
          zodiacSignGeorgian: "рЃЏрЃерЃЋрЃўрЃџрЃЊрЃЮрЃАрЃљрЃюрЃў",
          content: "рЃЏрЃерЃЋрЃўрЃџрЃЊрЃЮрЃАрЃюрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃљрЃ«рЃљрЃџрЃў рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃџрЃЮрЃЉрЃћрЃЉрЃў рЃЊрЃљ рЃЌрЃљрЃЋрЃњрЃљрЃЊрЃљрЃАрЃљрЃЋрЃљрЃџрЃў рЃгрЃўрЃюрЃљ рЃърЃџрЃљрЃюрЃќрЃћрЃљ. рЃўрЃБрЃърЃўрЃбрЃћрЃарЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃњрЃљрЃцрЃљрЃарЃЌрЃЮрЃћрЃЉрЃўрЃА рЃърЃћрЃарЃАрЃърЃћрЃЦрЃбрЃўрЃЋрЃћрЃЉрЃў рЃўрЃ«рЃАрЃюрЃћрЃЉрЃљ.",
          date: new Date()
        },
        {
          zodiacSign: "capricorn",
          zodiacSignGeorgian: "рЃдрЃЮрЃарЃў",
          content: "рЃдрЃЮрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃърЃарЃљрЃЦрЃбрЃўрЃЎрЃБрЃџрЃў рЃАрЃљрЃЎрЃўрЃЌрЃ«рЃћрЃЉрЃў рЃЊрЃљ рЃЎрЃљрЃарЃўрЃћрЃарЃБрЃџрЃў рЃгрЃўрЃюрЃАрЃЋрЃџрЃљ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ. рЃАрЃљрЃбрЃБрЃарЃюрЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃЊрЃўрЃАрЃфрЃўрЃърЃџрЃўрЃюрЃљ рЃњрЃљрЃЏрЃЮрЃњрЃљрЃЊрЃњрЃћрЃЉрЃљрЃЌ.",
          date: new Date()
        },
        {
          zodiacSign: "aquarius",
          zodiacSignGeorgian: "рЃгрЃДрЃљрЃџрЃЏрЃфрЃЮрЃфрЃљрЃЋрЃў",
          content: "рЃгрЃДрЃљрЃџрЃЏрЃфрЃЮрЃфрЃљрЃЋрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃўрЃюрЃЮрЃЋрЃљрЃфрЃўрЃћрЃЉрЃў рЃЊрЃљ рЃљрЃ«рЃљрЃџрЃў рЃўрЃЊрЃћрЃћрЃЉрЃў рЃгрЃўрЃюрЃљ рЃърЃџрЃљрЃюрЃќрЃћрЃљ. рЃБрЃарЃљрЃюрЃўрЃА рЃћрЃюрЃћрЃарЃњрЃўрЃљ рЃљрЃарЃљрЃАрЃбрЃљрЃюрЃЊрЃљрЃарЃбрЃБрЃџ рЃњрЃљрЃЊрЃљрЃгрЃДрЃЋрЃћрЃбрЃўрЃџрЃћрЃЉрЃћрЃЉрЃА рЃ«рЃћрЃџрЃА рЃБрЃгрЃДрЃЮрЃЉрЃА.",
        date: new Date()
      },
      {
          zodiacSign: "pisces",
          zodiacSignGeorgian: "рЃЌрЃћрЃЋрЃќрЃћрЃЉрЃў",
          content: "рЃЌрЃћрЃЋрЃќрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃЊрЃдрЃћрЃА рЃўрЃюрЃбрЃБрЃўрЃфрЃўрЃљ рЃЊрЃљ рЃАрЃБрЃџрЃўрЃћрЃарЃў рЃќрЃарЃЊрЃљ рЃњрЃљрЃюрЃАрЃљрЃЎрЃБрЃЌрЃарЃћрЃЉрЃўрЃЌ рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЋрЃљрЃюрЃўрЃљ. рЃюрЃћрЃърЃбрЃБрЃюрЃўрЃА рЃњрЃљрЃЋрЃџрЃћрЃюрЃўрЃЌ рЃЎрЃарЃћрЃљрЃбрЃўрЃБрЃџрЃў рЃћрЃюрЃћрЃарЃњрЃўрЃљ рЃўрЃќрЃарЃЊрЃћрЃЉрЃљ.",
        date: new Date()
      }
    ];

      console.log('­Ъћ« Seeding horoscopes...');
      for (const horoscope of horoscopeData) {
        await db.insert(horoscopes).values(horoscope).onConflictDoNothing();
      }

      // Initialize realistic view counts for historical articles
      console.log('­ЪЊі Initializing historical view counts...');
      await this.initializeHistoricalViewCounts();

      console.log('РюЁ Database seeding completed successfully');
    } catch (error) {
      console.error('РЮї Error seeding database:', error);
      throw error;
    }
  }

  async initializeHistoricalViewCounts(): Promise<void> {
    try {
      // Set realistic view counts based on article age and popularity
      const historicalViewData = [
        { id: 1, views: 2847, likes: 156 }, // Featured horoscope article
        { id: 2, views: 1923, likes: 84 },  // Crystals article
        { id: 3, views: 1456, likes: 67 },  // Moon phases article  
        { id: 4, views: 1122, likes: 45 },  // Meditation article
        { id: 5, views: 1678, likes: 89 }   // Featured spirituality article
      ];

      for (const viewData of historicalViewData) {
        await db.update(articles)
          .set({ 
            views: viewData.views,
            likes: viewData.likes 
          })
          .where(eq(articles.id, viewData.id));
      }

      console.log('­ЪЊі Historical view counts initialized successfully');
    } catch (error) {
      console.error('РЮї Error initializing historical view counts:', error);
      // Don't throw error for view count initialization as it's not critical
    }
  }

  async getArticles(limit = 10, offset = 0, category?: string, featured?: boolean): Promise<Article[]> {
    try {
      const conditions = [];
      if (category) {
        conditions.push(eq(articles.category, category));
      }
      if (featured !== undefined) {
        conditions.push(eq(articles.featured, featured));
      }
      
      if (conditions.length > 0) {
        return await db.select().from(articles)
          .where(and(...conditions))
          .orderBy(desc(articles.publishedAt))
          .limit(limit)
          .offset(offset);
      } else {
        return await db.select().from(articles)
          .orderBy(desc(articles.publishedAt))
          .limit(limit)
          .offset(offset);
      }
    } catch (error) {
      console.error('РЮї Error fetching articles:', error);
      throw new Error('Failed to fetch articles');
    }
  }

  async getArticle(id: number): Promise<Article | undefined> {
    try {
      const result = await db.select().from(articles).where(eq(articles.id, id)).limit(1);
      return result[0];
    } catch (error) {
      console.error(`РЮї Error fetching article ${id}:`, error);
      throw new Error('Failed to fetch article');
    }
  }

  async createArticle(insertArticle: InsertArticle): Promise<Article> {
    try {
      const result = await db.insert(articles).values(insertArticle).returning();
      return result[0];
    } catch (error) {
      console.error('РЮї Error creating article:', error);
      throw new Error('Failed to create article');
    }
  }

  async updateArticleViews(id: number, sessionId: string, ipAddress?: string, userAgent?: string): Promise<boolean> {
    try {
      // First check if this session has already viewed this article
      const hasViewed = await this.hasViewedArticle(id, sessionId);
      if (hasViewed) {
        console.log(`­ЪћЇ Session ${sessionId} has already viewed article ${id}, skipping view count`);
        return false; // View not counted as it's duplicate
      }

      // Record the view in the tracking table
      await this.recordArticleView({
        articleId: id,
        sessionId,
        ipAddress,
        userAgent
      });

      // Increment the view count in the articles table
      await db.update(articles)
        .set({ views: sql`${articles.views} + 1` })
        .where(eq(articles.id, id));

      console.log(`­ЪЊі New view recorded for article ${id} from session ${sessionId}`);
      return true; // View was successfully counted
    } catch (error) {
      console.error(`РЮї Error updating article views for ${id}:`, error);
      // Don't throw error for view updates as it's not critical
      return false;
    }
  }

  async searchArticles(query: string): Promise<Article[]> {
    try {
      const searchTerm = `%${query}%`;
      return await db.select().from(articles)
        .where(
          or(
            like(articles.title, searchTerm),
            like(articles.excerpt, searchTerm),
            like(articles.content, searchTerm)
          )
        )
        .orderBy(desc(articles.publishedAt))
        .limit(20);
    } catch (error) {
      console.error('РЮї Error searching articles:', error);
      throw new Error('Failed to search articles');
    }
  }

  async getPopularArticles(limit = 5): Promise<Article[]> {
    try {
      return await db.select().from(articles)
        .orderBy(desc(articles.views), desc(articles.likes))
        .limit(limit);
    } catch (error) {
      console.error('РЮї Error fetching popular articles:', error);
      throw new Error('Failed to fetch popular articles');
    }
  }

  async getCategories(): Promise<Category[]> {
    try {
      return await db.select().from(categories).orderBy(categories.name);
    } catch (error) {
      console.error('РЮї Error fetching categories:', error);
      throw new Error('Failed to fetch categories');
    }
  }

  async getCategory(name: string): Promise<Category | undefined> {
    try {
      const result = await db.select().from(categories).where(eq(categories.name, name)).limit(1);
      return result[0];
    } catch (error) {
      console.error(`РЮї Error fetching category ${name}:`, error);
      throw new Error('Failed to fetch category');
    }
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    try {
      const result = await db.insert(categories).values(insertCategory).returning();
      return result[0];
    } catch (error) {
      console.error('РЮї Error creating category:', error);
      throw new Error('Failed to create category');
    }
  }

  async getAllHoroscopes(): Promise<Horoscope[]> {
    try {
      const result = await db.select().from(horoscopes).orderBy(horoscopes.zodiacSign);
      return result;
    } catch (error) {
      console.error('РЮї Error fetching all horoscopes:', error);
      throw new Error('Failed to fetch horoscopes');
    }
  }

  async getDailyHoroscope(zodiacSign: string): Promise<Horoscope | undefined> {
    try {
      // For simplicity, just get the latest horoscope for the zodiac sign
      // In a real app, you'd want proper date-based filtering
      const result = await db.select().from(horoscopes)
        .where(eq(horoscopes.zodiacSign, zodiacSign))
        .orderBy(desc(horoscopes.date))
        .limit(1);
      
      return result[0];
    } catch (error) {
      console.error(`РЮї Error fetching horoscope for ${zodiacSign}:`, error);
      throw new Error('Failed to fetch horoscope');
    }
  }

  async createHoroscope(insertHoroscope: InsertHoroscope): Promise<Horoscope> {
    try {
      const result = await db.insert(horoscopes).values(insertHoroscope).returning();
      return result[0];
    } catch (error) {
      console.error('РЮї Error creating horoscope:', error);
      throw new Error('Failed to create horoscope');
    }
  }

  async updateArticle(id: number, updates: Partial<InsertArticle>): Promise<Article | undefined> {
    try {
      const result = await db.update(articles)
        .set(updates)
        .where(eq(articles.id, id))
        .returning();
      return result[0];
    } catch (error) {
      console.error(`РЮї Error updating article ${id}:`, error);
      throw new Error('Failed to update article');
    }
  }

  async deleteArticle(id: number): Promise<boolean> {
    try {
      const result = await db.delete(articles).where(eq(articles.id, id)).returning();
      return result.length > 0;
    } catch (error) {
      console.error(`РЮї Error deleting article ${id}:`, error);
      throw new Error('Failed to delete article');
    }
  }

  async getAllUsers(): Promise<any[]> {
    try {
      // For now, return mock data since we don't have a users table yet
      // This would be replaced with actual user queries when authentication is fully implemented
    return [
        { id: 1, username: 'admin', email: 'admin@astrologyinsights.ge', role: 'admin', createdAt: new Date() },
        { id: 2, username: 'editor', email: 'editor@astrologyinsights.ge', role: 'editor', createdAt: new Date() }
    ];
    } catch (error) {
      console.error('РЮї Error fetching users:', error);
      throw new Error('Failed to fetch users');
    }
  }

  async createUser(user: { username: string; email: string; role: string }): Promise<any> {
    try {
      // Mock user creation - would be replaced with actual database insert
    const newUser = {
        id: Date.now(),
      ...user,
      createdAt: new Date()
    };
      console.log('­ЪЉц User created (mock):', newUser);
    return newUser;
    } catch (error) {
      console.error('РЮї Error creating user:', error);
      throw new Error('Failed to create user');
    }
  }

  async getViewStatistics(): Promise<{ totalViews: number; totalLikes: number; totalArticles: number }> {
    try {
      const result = await db.select({
        totalViews: sql<number>`sum(${articles.views})`,
        totalLikes: sql<number>`sum(${articles.likes})`,
        totalArticles: sql<number>`count(${articles.id})`
      }).from(articles);

      return {
        totalViews: result[0]?.totalViews || 0,
        totalLikes: result[0]?.totalLikes || 0,
        totalArticles: result[0]?.totalArticles || 0
      };
    } catch (error) {
      console.error('РЮї Error fetching view statistics:', error);
      throw new Error('Failed to fetch view statistics');
    }
  }

  async hasViewedArticle(articleId: number, sessionId: string): Promise<boolean> {
    try {
      const result = await db.select().from(articleViews)
        .where(and(
          eq(articleViews.articleId, articleId),
          eq(articleViews.sessionId, sessionId)
        ));
      return result.length > 0;
    } catch (error) {
      console.error(`РЮї Error checking if article ${articleId} has been viewed by session ${sessionId}:`, error);
      throw new Error('Failed to check if article has been viewed');
    }
  }

  async recordArticleView(view: InsertArticleView): Promise<void> {
    try {
      await db.insert(articleViews).values(view).onConflictDoNothing();
    } catch (error) {
      console.error('РЮї Error recording article view:', error);
      throw new Error('Failed to record article view');
    }
  }
}

// Export singleton instance
export const storage = new DatabaseStorage();
